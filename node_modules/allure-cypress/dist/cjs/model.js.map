{"version":3,"file":"model.js","names":["ALLURE_REPORT_SYSTEM_HOOK","exports","ALLURE_REPORT_STEP_COMMAND"],"sources":["../../src/model.ts"],"sourcesContent":["import type { Label, Status, StatusDetails } from \"allure-js-commons\";\nimport type { RuntimeMessage, TestPlanV1 } from \"allure-js-commons/sdk\";\nimport type { ReporterConfig } from \"allure-js-commons/sdk/reporter\";\n\nexport const ALLURE_REPORT_SYSTEM_HOOK = \"__allure_report_system_hook__\";\n\nexport const ALLURE_REPORT_STEP_COMMAND = \"__allure_report_step_command__\";\n\nexport type AllureCypressConfig = ReporterConfig & {\n  videoOnFailOnly?: boolean;\n};\n\nexport type CypressSuite = Mocha.Suite & {\n  id: string;\n  parent: CypressSuite | undefined;\n  tests: CypressTest[];\n  suites: CypressSuite[];\n};\n\nexport type CypressTest = Mocha.Test & {\n  wallClockStartedAt?: Date;\n  parent: CypressSuite | undefined;\n};\n\nexport type CypressHook = Mocha.Hook & {\n  hookId: string;\n  hookName: string;\n  parent: CypressSuite | undefined;\n};\n\nexport type CypressCommand = {\n  attributes: {\n    name: string;\n    id: string;\n    args: any[];\n  };\n  state: \"passed\" | \"failed\" | \"queued\";\n};\n\nexport type CupressRunStart = {\n  type: \"cypress_run_start\";\n  data: object;\n};\n\nexport type CypressSuiteStartMessage = {\n  type: \"cypress_suite_start\";\n  data: {\n    id: string;\n    name: string;\n    root: boolean;\n    start: number;\n  };\n};\n\nexport type CypressSuiteEndMessage = {\n  type: \"cypress_suite_end\";\n  data: {\n    root: boolean;\n    stop: number;\n  };\n};\n\nexport type CypressHookStartMessage = {\n  type: \"cypress_hook_start\";\n  data: {\n    name: string;\n    scopeType: \"each\" | \"all\";\n    position: \"before\" | \"after\";\n    start: number;\n  };\n};\n\nexport type CypressHookEndMessage = {\n  type: \"cypress_hook_end\";\n  data: {\n    duration: number;\n  };\n};\n\nexport type CypressTestStartMessage = {\n  type: \"cypress_test_start\";\n  data: {\n    name: string;\n    fullName: string;\n    start: number;\n    labels: Label[];\n  };\n};\n\nexport type CypressFailMessage = {\n  type: \"cypress_fail\";\n  data: {\n    status: Status;\n    statusDetails: StatusDetails;\n  };\n};\n\nexport type CypressTestSkipMessage = {\n  type: \"cypress_test_skip\";\n  data: {\n    statusDetails?: StatusDetails;\n  };\n};\n\nexport type CypressTestPassMessage = {\n  type: \"cypress_test_pass\";\n  data: object;\n};\n\nexport type CypressSkippedTestMessage = {\n  type: \"cypress_skipped_test\";\n  data: CypressTestStartMessage[\"data\"] &\n    CypressFailMessage[\"data\"] &\n    CypressTestEndMessage[\"data\"] & {\n      suites: string[];\n    };\n};\n\nexport type CypressTestEndMessage = {\n  type: \"cypress_test_end\";\n  data: {\n    duration: number;\n    retries: number;\n  };\n};\n\nexport type CypressCommandStartMessage = {\n  type: \"cypress_command_start\";\n  data: {\n    name: string;\n    args: string[];\n    start: number;\n  };\n};\n\nexport type CypressCommandEndMessage = {\n  type: \"cypress_command_end\";\n  data: {\n    status: Status;\n    statusDetails?: StatusDetails;\n    stop: number;\n  };\n};\n\nexport type CypressMessage =\n  | RuntimeMessage\n  | CupressRunStart\n  | CypressSuiteStartMessage\n  | CypressSuiteEndMessage\n  | CypressHookStartMessage\n  | CypressHookEndMessage\n  | CypressTestStartMessage\n  | CypressCommandStartMessage\n  | CypressCommandEndMessage\n  | CypressTestPassMessage\n  | CypressFailMessage\n  | CypressTestSkipMessage\n  | CypressSkippedTestMessage\n  | CypressTestEndMessage;\n\nexport type SpecContext = {\n  specPath: string;\n  package: string;\n  test: string | undefined;\n  fixture: string | undefined;\n  commandSteps: string[];\n  videoScope: string;\n  suiteIdToScope: Map<string, string>;\n  suiteScopeToId: Map<string, string>;\n  suiteScopes: string[];\n  testScope: string | undefined;\n  suiteNames: string[];\n  failed: boolean;\n};\n\nexport type AllureSpecState = {\n  initialized: boolean;\n  testPlan: TestPlanV1 | null | undefined;\n  messages: CypressMessage[];\n  currentTest?: CypressTest;\n};\n\nexport type AllureCypressTaskArgs = {\n  absolutePath: string;\n  messages: readonly CypressMessage[];\n  isInteractive: boolean;\n};\n\nexport type CypressSuiteFunction = (\n  title: string,\n  configOrFn?: Cypress.SuiteConfigOverrides | ((this: Mocha.Suite) => void),\n  fn?: (this: Mocha.Suite) => void,\n) => Mocha.Suite;\n\nexport type DirectHookImplementation = Mocha.AsyncFunc | ((this: Mocha.Context) => void);\nexport type HookImplementation = Mocha.Func | DirectHookImplementation;\n"],"mappings":";;;;;;AAIO,IAAMA,yBAAyB,GAAAC,OAAA,CAAAD,yBAAA,GAAG,+BAA+B;AAEjE,IAAME,0BAA0B,GAAAD,OAAA,CAAAC,0BAAA,GAAG,gCAAgC","ignoreList":[]}