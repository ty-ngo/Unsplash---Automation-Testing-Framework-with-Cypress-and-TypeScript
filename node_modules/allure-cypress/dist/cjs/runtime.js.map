{"version":3,"file":"runtime.js","names":["_allureJsCommons","require","_sdk","_runtime","_model","_state","_utils","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classPrivateFieldInitSpec","a","_checkPrivateRedeclaration","set","has","TypeError","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","n","_resetMessages","WeakMap","_enqueueMessageAsync","_dequeueAllMessages","AllureCypressTestRuntime","constructor","taskName","messages","cy","task","absolutePath","Cypress","spec","absolute","log","args","isInteractive","config","setRuntimeMessages","message","enqueueRuntimeMessage","Promise","resolve","getRuntimeMessages","labels","_len","Array","_key","type","data","links","_len2","_key2","parameter","name","options","parameters","description","markdown","descriptionHtml","html","displayName","historyId","testCaseId","attachment","content","attachmentRawContent","actualEncoding","attachmentContent","uint8ArrayToBase64","encoding","contentType","fileExtension","attachmentFromPath","path","logStep","status","undefined","Status","PASSED","error","wrap","ALLURE_REPORT_STEP_COMMAND","then","start","Date","now","stop","statusDetails","getMessageAndTraceFromError","step","body","result","stepDisplayName","stepParameter","mode","exports","initTestRuntime","setGlobalTestRuntime","getTestRuntime","getGlobalTestRuntime","reportRunStart","reportSuiteStart","suite","id","title","root","reportSuiteEnd","reportHookStart","hook","scopeType","hookName","includes","position","reportHookEnd","_hook$duration","duration","reportTestStart","test","setCurrentTest","getTestStartData","markTestAsReported","reportUnfinishedSteps","runtimeMessages","unfinishedStepsMessages","getUnfinishedStepsMessages","reportTestPass","reportTestSkip","isTestReported","reportUnfinishedCommand","SKIPPED","getTestSkipData","reportCommandStart","command","concat","attributes","map","arg","JSON","stringify","reportCommandEnd","reportScreenshot","ContentType","PNG","startCommandMessageIdx","toReversed","findIndex","_ref","stopCommandMessageIdx","_ref2","hasUnfinishedCommand","reportTestOrHookFail","err","getStatusFromError","reportTestEnd","_test$duration","_retries","retries","dropCurrentTest","completeHookErrorReporting","isEachHook","parent","testFailData","getStatusDataOfTestSkippedByHookError","reportCurrentTestIfAny","reportRemainingTests","enableScopeLevelAfterHookReporting","getSuiteDepth","incSuiteDepth","decSuiteDepth","createSuiteDepthCounterState","patchDescribe","patchAfter","flushRuntimeMessages","flushAllureMessagesToTask","completeSpec","flushAllureMessagesToTaskAsync","completeSpecIfNoAfterHookLeft","context","isLastRootAfterHook","isAllureHook","completeSpecOnAfterHookFailure","hookError","allureError","logAllureRootAfterError","currentTest","getCurrentTest","iterateTests","reportTestsSkippedByHookError","pending","getTestStopData","suites","getSuites","hookTitle","trace","getSkipReason","suiteName","forwardDescribeCall","target","_len3","_key3","configOrFn","fn","patchDescribeFn","originalDescribeFn","globalThis","describe","patchedDescribe","only","skip","suiteDepth","originalAfter","after","patchedAfter","nameOrFn","wrapRootAfterFn","wrappedFn","wrapAfterFnWithCallback","wrapAfterFnWithoutArgs","done","wrappedDone","_completeSpecOnAfterH","_completeSpecIfNoAfte","bind","syncError","throwAfterSpecCompletion","isPromise","asyncError","_completeSpecOnAfterH2","chain","_context$test$title","_context$test","console","_unused","currentAfterAll","rootSuite","hooks","lastAfterAll","findLast","h","hookId"],"sources":["../../src/runtime.ts"],"sourcesContent":["import { ContentType, Status } from \"allure-js-commons\";\nimport type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions, StatusDetails } from \"allure-js-commons\";\nimport {\n  getMessageAndTraceFromError,\n  getStatusFromError,\n  getUnfinishedStepsMessages,\n  isPromise,\n} from \"allure-js-commons/sdk\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getGlobalTestRuntime, setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type { TestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type {\n  AllureCypressTaskArgs,\n  CypressCommand,\n  CypressCommandEndMessage,\n  CypressFailMessage,\n  CypressHook,\n  CypressMessage,\n  CypressSuite,\n  CypressSuiteFunction,\n  CypressTest,\n  DirectHookImplementation,\n  HookImplementation,\n} from \"./model.js\";\nimport { ALLURE_REPORT_STEP_COMMAND } from \"./model.js\";\nimport {\n  dropCurrentTest,\n  enqueueRuntimeMessage,\n  getCurrentTest,\n  getRuntimeMessages,\n  setCurrentTest,\n  setRuntimeMessages,\n} from \"./state.js\";\nimport {\n  getSuites,\n  getTestSkipData,\n  getTestStartData,\n  getTestStopData,\n  isAllureHook,\n  isTestReported,\n  iterateTests,\n  markTestAsReported,\n  uint8ArrayToBase64,\n} from \"./utils.js\";\n\nexport class AllureCypressTestRuntime implements TestRuntime {\n  constructor() {\n    this.#resetMessages();\n  }\n\n  labels(...labels: Label[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        labels,\n      },\n    });\n  }\n\n  links(...links: Link[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        links,\n      },\n    });\n  }\n\n  parameter(name: string, value: string, options?: ParameterOptions) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        parameters: [\n          {\n            name,\n            value,\n            ...options,\n          },\n        ],\n      },\n    });\n  }\n\n  description(markdown: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        description: markdown,\n      },\n    });\n  }\n\n  descriptionHtml(html: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        descriptionHtml: html,\n      },\n    });\n  }\n\n  displayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        displayName: name,\n      },\n    });\n  }\n\n  historyId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        historyId: value,\n      },\n    });\n  }\n\n  testCaseId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        testCaseId: value,\n      },\n    });\n  }\n\n  // @ts-ignore\n  attachment(name: string, content: string, options: AttachmentOptions) {\n    // @ts-ignore\n    const attachmentRawContent: string | Uint8Array = content?.type === \"Buffer\" ? content.data : content;\n    const actualEncoding = typeof attachmentRawContent === \"string\" ? \"utf8\" : \"base64\";\n    const attachmentContent = uint8ArrayToBase64(attachmentRawContent);\n\n    return this.#enqueueMessageAsync({\n      type: \"attachment_content\",\n      data: {\n        name,\n        content: attachmentContent,\n        encoding: actualEncoding,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, \"encoding\">) {\n    return this.#enqueueMessageAsync({\n      type: \"attachment_path\",\n      data: {\n        name,\n        path,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  logStep(name: string, status: Status = Status.PASSED, error?: Error) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.#enqueueMessageAsync({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve();\n      })\n      .then(() => {\n        return this.#enqueueMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: status,\n            stop: Date.now(),\n            statusDetails: error ? { ...getMessageAndTraceFromError(error) } : undefined,\n          },\n        });\n      });\n  }\n\n  step<T = void>(name: string, body: () => T | PromiseLike<T>) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.#enqueueMessageAsync({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve(body());\n      })\n      .then((result) => {\n        return this.#enqueueMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: Status.PASSED,\n            stop: Date.now(),\n          },\n        }).then(() => result);\n      });\n  }\n\n  stepDisplayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        name,\n      },\n    });\n  }\n\n  stepParameter(name: string, value: string, mode?: ParameterMode) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        parameters: [{ name, value, mode }],\n      },\n    });\n  }\n\n  flushAllureMessagesToTask = (taskName: string) => {\n    const messages = this.#dequeueAllMessages();\n    if (messages.length) {\n      cy.task(taskName, { absolutePath: Cypress.spec.absolute, messages }, { log: false });\n    }\n  };\n\n  flushAllureMessagesToTaskAsync = (taskName: string): Cypress.Chainable<unknown> | undefined => {\n    const messages = this.#dequeueAllMessages();\n    if (messages.length) {\n      const args: AllureCypressTaskArgs = {\n        absolutePath: Cypress.spec.absolute,\n        messages,\n        isInteractive: Cypress.config(\"isInteractive\"),\n      };\n      return cy.task(taskName, args, { log: false });\n    }\n  };\n\n  #resetMessages = () => setRuntimeMessages([]);\n\n  #enqueueMessageAsync = (message: CypressMessage): PromiseLike<void> => {\n    enqueueRuntimeMessage(message);\n    return Cypress.Promise.resolve();\n  };\n\n  #dequeueAllMessages = () => {\n    const messages = getRuntimeMessages();\n    this.#resetMessages();\n    return messages;\n  };\n}\n\nexport const initTestRuntime = () => setGlobalTestRuntime(new AllureCypressTestRuntime() as TestRuntime);\n\nexport const getTestRuntime = () => getGlobalTestRuntime() as AllureCypressTestRuntime;\n\nexport const reportRunStart = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_run_start\",\n    data: {},\n  });\n};\n\nexport const reportSuiteStart = (suite: CypressSuite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_start\",\n    data: {\n      id: suite.id,\n      name: suite.title,\n      root: suite.root,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportSuiteEnd = (suite: CypressSuite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_end\",\n    data: {\n      root: suite.root,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportHookStart = (hook: CypressHook, start?: number) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_start\",\n    data: {\n      name: hook.title,\n      scopeType: hook.hookName.includes(\"each\") ? \"each\" : \"all\",\n      position: hook.hookName.includes(\"before\") ? \"before\" : \"after\",\n      start: start ?? Date.now(),\n    },\n  });\n};\n\nexport const reportHookEnd = (hook: CypressHook) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_end\",\n    data: {\n      duration: hook.duration ?? 0,\n    },\n  });\n};\n\nexport const reportTestStart = (test: CypressTest) => {\n  setCurrentTest(test);\n  enqueueRuntimeMessage({\n    type: \"cypress_test_start\",\n    data: getTestStartData(test),\n  });\n  markTestAsReported(test);\n};\n\nexport const reportUnfinishedSteps = (status: Status, statusDetails?: StatusDetails) => {\n  const runtimeMessages = getRuntimeMessages() as RuntimeMessage[];\n  const unfinishedStepsMessages = getUnfinishedStepsMessages(runtimeMessages);\n  unfinishedStepsMessages.forEach(() => {\n    enqueueRuntimeMessage({\n      type: \"step_stop\",\n      data: {\n        stop: Date.now(),\n        status,\n        statusDetails,\n      },\n    });\n  });\n};\n\nexport const reportTestPass = () => {\n  reportUnfinishedSteps(Status.PASSED);\n  enqueueRuntimeMessage({\n    type: \"cypress_test_pass\",\n    data: {},\n  });\n};\n\nexport const reportTestSkip = (test: CypressTest) => {\n  if (isTestReported(test)) {\n    reportUnfinishedCommand(Status.SKIPPED, {\n      message: \"The test was skipped before the command was completed\",\n    });\n  } else {\n    reportTestStart(test);\n  }\n\n  enqueueRuntimeMessage({\n    type: \"cypress_test_skip\",\n    data: getTestSkipData(),\n  });\n};\n\nexport const reportCommandStart = (command: CypressCommand) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_command_start\",\n    data: {\n      name: `Command \"${command.attributes.name}\"`,\n      args: command.attributes.args.map((arg) => (typeof arg === \"string\" ? arg : JSON.stringify(arg, null, 2))),\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportCommandEnd = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_command_end\",\n    data: {\n      status: Status.PASSED,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportScreenshot = (path: string, name: string) => {\n  enqueueRuntimeMessage({\n    type: \"attachment_path\",\n    data: {\n      path: path,\n      name: name || \"Screenshot\",\n      contentType: ContentType.PNG,\n    },\n  });\n};\n\nexport const reportUnfinishedCommand = (status: Status, statusDetails?: StatusDetails) => {\n  const runtimeMessages = getRuntimeMessages();\n  const startCommandMessageIdx = runtimeMessages.toReversed().findIndex(({ type }) => type === \"cypress_command_start\");\n  const stopCommandMessageIdx = runtimeMessages.toReversed().findIndex(({ type }) => type === \"cypress_command_end\");\n  const hasUnfinishedCommand = startCommandMessageIdx > stopCommandMessageIdx;\n\n  const data: CypressCommandEndMessage[\"data\"] = { status, stop: Date.now() };\n  if (statusDetails) {\n    data.statusDetails = statusDetails;\n  }\n\n  if (hasUnfinishedCommand) {\n    enqueueRuntimeMessage({ type: \"cypress_command_end\", data });\n  }\n};\n\nexport const reportTestOrHookFail = (err: Error) => {\n  const status = getStatusFromError(err);\n  const statusDetails = getMessageAndTraceFromError(err);\n\n  reportUnfinishedCommand(status, statusDetails);\n\n  enqueueRuntimeMessage({\n    type: \"cypress_fail\",\n    data: {\n      status,\n      statusDetails,\n    },\n  });\n};\n\nexport const reportTestEnd = (test: CypressTest) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_test_end\",\n    data: {\n      duration: test.duration ?? 0,\n      retries: (test as any)._retries ?? 0,\n    },\n  });\n  dropCurrentTest();\n};\n\nexport const completeHookErrorReporting = (hook: CypressHook, err: Error) => {\n  const isEachHook = hook.hookName.includes(\"each\");\n  const suite = hook.parent!;\n  const testFailData = getStatusDataOfTestSkippedByHookError(hook.title, isEachHook, err, suite);\n\n  // Cypress doens't emit 'hook end' if the hook has failed.\n  reportHookEnd(hook);\n\n  // Cypress doens't emit 'test end' if the hook has failed.\n  // We must report the test's end manualy in case of a 'before each' hook.\n  reportCurrentTestIfAny();\n\n  // Cypress skips the remaining tests in the suite of a failed hook.\n  // We should include them to the report manually.\n  reportRemainingTests(suite, testFailData);\n};\n\n/**\n * Patches the `after` function, to inject an extra `after` hook after each spec-level\n * `after` hook defined by the user.\n */\nexport const enableScopeLevelAfterHookReporting = () => {\n  const [getSuiteDepth, incSuiteDepth, decSuiteDepth] = createSuiteDepthCounterState();\n  patchDescribe(incSuiteDepth, decSuiteDepth);\n  patchAfter(getSuiteDepth);\n};\n\nexport const flushRuntimeMessages = () => getTestRuntime().flushAllureMessagesToTask(\"reportAllureCypressSpecMessages\");\n\nexport const completeSpec = () =>\n  getTestRuntime().flushAllureMessagesToTaskAsync(\"reportFinalAllureCypressSpecMessages\");\n\nexport const completeSpecIfNoAfterHookLeft = (context: Mocha.Context) => {\n  if (isLastRootAfterHook(context)) {\n    const hook = context.test as CypressHook;\n    if (!isAllureHook(hook)) {\n      reportHookEnd(hook);\n    }\n    return completeSpec();\n  }\n};\n\nconst completeSpecOnAfterHookFailure = (\n  context: Mocha.Context,\n  hookError: Error,\n): Cypress.Chainable<unknown> | undefined => {\n  try {\n    reportTestOrHookFail(hookError);\n    completeHookErrorReporting(context.test as CypressHook, hookError);\n\n    // cy.task's then doesn't have onrejected, that's why we don't log async Allure errors here.\n    return completeSpec();\n  } catch (allureError) {\n    logAllureRootAfterError(context, allureError);\n  }\n};\n\nconst reportCurrentTestIfAny = () => {\n  const currentTest = getCurrentTest();\n  if (currentTest) {\n    reportTestEnd(currentTest);\n  }\n};\n\nconst reportRemainingTests = (suite: CypressSuite, testFailData: CypressFailMessage[\"data\"]) => {\n  for (const test of iterateTests(suite)) {\n    // Some tests in the suite might've been already reported.\n    if (!isTestReported(test)) {\n      reportTestsSkippedByHookError(\n        test,\n        test.pending ? { ...getTestSkipData(), status: Status.SKIPPED } : testFailData,\n      );\n    }\n  }\n};\n\nconst reportTestsSkippedByHookError = (test: CypressTest, testFailData: CypressFailMessage[\"data\"]) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_skipped_test\",\n    data: {\n      ...getTestStartData(test),\n      ...testFailData,\n      ...getTestStopData(test),\n      suites: getSuites(test).map((s) => s.id),\n    },\n  });\n  markTestAsReported(test);\n};\n\nconst getStatusDataOfTestSkippedByHookError = (\n  hookTitle: string,\n  isEachHook: boolean,\n  err: Error,\n  suite: CypressSuite,\n) => {\n  const status = isEachHook ? Status.SKIPPED : getStatusFromError(err);\n  const { message, trace } = getMessageAndTraceFromError(err);\n  return {\n    status,\n    statusDetails: {\n      message: isEachHook ? getSkipReason(hookTitle, suite) : message,\n      trace,\n    },\n  };\n};\n\nconst getSkipReason = (hookTitle: string, suite: CypressSuite) => {\n  const suiteName = suite.title ? `'${suite.title}'` : \"root\";\n  return `'${hookTitle}' defined in the ${suiteName} suite has failed`;\n};\n\nconst forwardDescribeCall = (target: CypressSuiteFunction, ...args: Parameters<CypressSuiteFunction>) => {\n  const [title, configOrFn, fn] = args;\n  if (typeof fn === \"undefined\" && typeof configOrFn === \"undefined\") {\n    return target(title);\n  } else if (typeof configOrFn === \"function\") {\n    return target(title, configOrFn);\n  } else {\n    return target(title, configOrFn, fn);\n  }\n};\n\nconst patchDescribe = (incSuiteDepth: () => void, decSuiteDepth: () => void) => {\n  const patchDescribeFn =\n    (target: CypressSuiteFunction): CypressSuiteFunction =>\n    (title, configOrFn, fn) => {\n      incSuiteDepth();\n      try {\n        return forwardDescribeCall(target, title, configOrFn, fn);\n      } finally {\n        decSuiteDepth();\n      }\n    };\n  const originalDescribeFn: Mocha.SuiteFunction = globalThis.describe;\n  const patchedDescribe = patchDescribeFn(originalDescribeFn) as Mocha.SuiteFunction;\n  patchedDescribe.only = patchDescribeFn(\n    originalDescribeFn.only as CypressSuiteFunction,\n  ) as Mocha.ExclusiveSuiteFunction;\n  patchedDescribe.skip = patchDescribeFn(originalDescribeFn.skip as CypressSuiteFunction) as Mocha.PendingSuiteFunction;\n  globalThis.describe = patchedDescribe;\n};\n\nconst createSuiteDepthCounterState = (): [get: () => number, inc: () => void, dec: () => void] => {\n  let suiteDepth = 0;\n  return [\n    () => suiteDepth,\n    () => {\n      suiteDepth++;\n    },\n    () => {\n      suiteDepth--;\n    },\n  ];\n};\n\nconst patchAfter = (getSuiteDepth: () => number) => {\n  const originalAfter = globalThis.after;\n  const patchedAfter = (nameOrFn: string | HookImplementation, fn?: HookImplementation): void => {\n    return typeof nameOrFn === \"string\"\n      ? originalAfter(nameOrFn, wrapRootAfterFn(getSuiteDepth, fn))\n      : originalAfter(wrapRootAfterFn(getSuiteDepth, nameOrFn)!);\n  };\n  globalThis.after = patchedAfter;\n};\n\nconst wrapRootAfterFn = (getSuiteDepth: () => number, fn?: HookImplementation): HookImplementation | undefined => {\n  if (getSuiteDepth() === 0 && fn) {\n    const wrappedFn = fn.length ? wrapAfterFnWithCallback(fn) : wrapAfterFnWithoutArgs(fn as DirectHookImplementation);\n    Object.defineProperty(wrappedFn, \"name\", { value: fn.name });\n    return wrappedFn;\n  }\n  return fn;\n};\n\nconst wrapAfterFnWithCallback = (fn: Mocha.Func): Mocha.Func => {\n  return function (this: Mocha.Context, done: Mocha.Done) {\n    const wrappedDone = (hookError?: Error) => {\n      if (hookError) {\n        if (!completeSpecOnAfterHookFailure(this, hookError)?.then(() => done(hookError))) {\n          done(hookError);\n        }\n        return;\n      }\n\n      try {\n        if (completeSpecIfNoAfterHookLeft(this)?.then(() => done())) {\n          return;\n        }\n      } catch (allureError) {\n        done(allureError);\n        return;\n      }\n\n      done();\n    };\n    return fn.bind(this)(wrappedDone);\n  };\n};\n\nconst wrapAfterFnWithoutArgs = (fn: DirectHookImplementation) => {\n  return function (this: Mocha.Context) {\n    let result;\n    let syncError: any;\n\n    try {\n      result = fn.bind(this)();\n    } catch (e) {\n      syncError = e;\n    }\n\n    if (syncError) {\n      throwAfterSpecCompletion(this, syncError);\n    } else if (isPromise(result)) {\n      return result.then(\n        () => completeSpecIfNoAfterHookLeft(this),\n        (asyncError) => throwAfterSpecCompletion(this, asyncError),\n      );\n    } else {\n      completeSpecIfNoAfterHookLeft(this);\n      return result;\n    }\n  };\n};\n\nconst throwAfterSpecCompletion = (context: Mocha.Context, err: any) => {\n  const chain = completeSpecOnAfterHookFailure(context, err as Error)?.then(() => {\n    throw err;\n  });\n  if (!chain) {\n    throw err;\n  }\n};\n\nconst logAllureRootAfterError = (context: Mocha.Context, err: unknown) => {\n  // We play safe and swallow errors here to keep the original 'after all' error.\n  try {\n    // eslint-disable-next-line no-console\n    console.error(`Unexpected error when reporting the failure of ${context.test?.title ?? \"'after all'\"}`);\n    // eslint-disable-next-line no-console\n    console.error(err);\n  } catch {}\n};\n\nconst isLastRootAfterHook = (context: Mocha.Context) => {\n  const currentAfterAll = context.test as CypressHook;\n  const rootSuite = (context.test as CypressHook).parent!;\n  const hooks = (rootSuite as any).hooks as CypressHook[];\n  const lastAfterAll = hooks.findLast((h) => h.hookName === \"after all\");\n  return lastAfterAll?.hookId === currentAfterAll.hookId;\n};\n"],"mappings":"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","ignoreList":[]}