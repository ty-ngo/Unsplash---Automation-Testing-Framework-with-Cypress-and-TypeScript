"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setRuntimeMessages = exports.setCurrentTest = exports.setAllureInitialized = exports.isAllureInitialized = exports.getRuntimeMessages = exports.getCurrentTest = exports.getAllureTestPlan = exports.getAllureState = exports.enqueueRuntimeMessage = exports.dropCurrentTest = void 0;
var getAllureState = () => {
  var state = Cypress.env("allure");
  if (!state) {
    state = {
      initialized: false,
      messages: [],
      testPlan: undefined,
      currentTest: undefined
    };
    Cypress.env("allure", state);
  }
  return state;
};
exports.getAllureState = getAllureState;
var isAllureInitialized = () => getAllureState().initialized;
exports.isAllureInitialized = isAllureInitialized;
var setAllureInitialized = () => {
  getAllureState().initialized = true;
};
exports.setAllureInitialized = setAllureInitialized;
var getRuntimeMessages = () => getAllureState().messages;
exports.getRuntimeMessages = getRuntimeMessages;
var setRuntimeMessages = value => {
  getAllureState().messages = value;
};
exports.setRuntimeMessages = setRuntimeMessages;
var enqueueRuntimeMessage = message => {
  getRuntimeMessages().push(message);
};
exports.enqueueRuntimeMessage = enqueueRuntimeMessage;
var getAllureTestPlan = () => getAllureState().testPlan;
exports.getAllureTestPlan = getAllureTestPlan;
var getCurrentTest = () => getAllureState().currentTest;
exports.getCurrentTest = getCurrentTest;
var setCurrentTest = test => {
  getAllureState().currentTest = test;
};
exports.setCurrentTest = setCurrentTest;
var dropCurrentTest = () => {
  getAllureState().currentTest = undefined;
};
exports.dropCurrentTest = dropCurrentTest;
//# sourceMappingURL=state.js.map