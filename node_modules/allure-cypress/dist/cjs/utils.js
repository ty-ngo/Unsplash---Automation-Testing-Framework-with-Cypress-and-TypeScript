"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uint8ArrayToBase64 = exports.toReversed = exports.shouldCommandBeSkipped = exports.resolveStatusWithDetails = exports.markTestAsReported = exports.last = exports.iterateTests = exports.iterateSuites = exports.isTestReported = exports.isRootAfterAllHook = exports.isAllureHook = exports.getTestStopData = exports.getTestStartData = exports.getTestSkipData = exports.getSuites = exports.getSuitePath = exports.getNamesAndLabels = exports.applyTestPlan = void 0;
var _allureJsCommons = require("allure-js-commons");
var _sdk = require("allure-js-commons/sdk");
var _model = require("./model.js");
var _state = require("./state.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var uint8ArrayToBase64 = data => {
  // @ts-ignore
  var u8arrayLike = Array.isArray(data) || data.buffer;
  if (!u8arrayLike) {
    return data;
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  return btoa(String.fromCharCode.apply(null, data));
};
exports.uint8ArrayToBase64 = uint8ArrayToBase64;
var getSuites = test => {
  var suites = [];
  for (var s = test.parent; s; s = s.parent) {
    suites.push(s);
  }
  suites.reverse();
  return suites;
};
exports.getSuites = getSuites;
var getSuitePath = test => getSuites(test).filter(s => s.title).map(s => s.title);
exports.getSuitePath = getSuitePath;
var shouldCommandBeSkipped = command => {
  var _last;
  if (((_last = last(command.attributes.args)) === null || _last === void 0 ? void 0 : _last.log) === false) {
    return true;
  }
  if (command.attributes.name === "task" && command.attributes.args[0] === "reportAllureRuntimeMessages") {
    return true;
  }

  // we don't need to report then commands because it's just a promise handle
  if (command.attributes.name === "then") {
    return true;
  }

  // we should skip artificial wrap from allure steps
  if (command.attributes.name === "wrap" && command.attributes.args[0] === _model.ALLURE_REPORT_STEP_COMMAND) {
    return true;
  }
  return false;
};
exports.shouldCommandBeSkipped = shouldCommandBeSkipped;
var toReversed = arr => {
  var result = [];
  for (var i = arr.length - 1; i >= 0; i--) {
    result.push(arr[i]);
  }
  return result;
};
exports.toReversed = toReversed;
var last = arr => {
  return arr[arr.length - 1];
};
exports.last = last;
var getNamesAndLabels = (spec, test) => {
  var rawName = test.title;
  var {
    cleanTitle: name,
    labels
  } = (0, _sdk.extractMetadataFromString)(rawName);
  var suites = test.titlePath().slice(0, -1);
  var fullName = "".concat(spec.relative, "#").concat([...suites, name].join(" "));
  return {
    name,
    labels,
    fullName
  };
};
exports.getNamesAndLabels = getNamesAndLabels;
var getTestStartData = test => {
  var _test$wallClockStarte;
  return _objectSpread(_objectSpread({}, getNamesAndLabels(Cypress.spec, test)), {}, {
    start: ((_test$wallClockStarte = test.wallClockStartedAt) === null || _test$wallClockStarte === void 0 ? void 0 : _test$wallClockStarte.getTime()) || Date.now()
  });
};
exports.getTestStartData = getTestStartData;
var getTestStopData = test => {
  var _test$duration, _retries;
  return {
    duration: (_test$duration = test.duration) !== null && _test$duration !== void 0 ? _test$duration : 0,
    retries: (_retries = test._retries) !== null && _retries !== void 0 ? _retries : 0
  };
};
exports.getTestStopData = getTestStopData;
var getTestSkipData = () => ({
  statusDetails: {
    message: "This is a pending test"
  }
});
exports.getTestSkipData = getTestSkipData;
var applyTestPlan = (spec, root) => {
  var testPlan = (0, _state.getAllureTestPlan)();
  if (testPlan) {
    for (var suite of iterateSuites(root)) {
      var indicesToRemove = getIndicesOfDeselectedTests(testPlan, spec, suite.tests);
      removeSortedIndices(suite.tests, indicesToRemove);
    }
  }
};
exports.applyTestPlan = applyTestPlan;
var resolveStatusWithDetails = error => error ? {
  status: (0, _sdk.getStatusFromError)(error),
  statusDetails: (0, _sdk.getMessageAndTraceFromError)(error)
} : {
  status: _allureJsCommons.Status.PASSED
};
exports.resolveStatusWithDetails = resolveStatusWithDetails;
var testReportedKey = Symbol("The test was reported to Allure");
var markTestAsReported = test => {
  test[testReportedKey] = true;
};
exports.markTestAsReported = markTestAsReported;
var isTestReported = test => test[testReportedKey] === true;
exports.isTestReported = isTestReported;
var iterateSuites = exports.iterateSuites = function* iterateSuites(parent) {
  var suiteStack = [];
  for (var s = parent; s; s = suiteStack.pop()) {
    yield s;

    // Pushing in reverse allows us to maintain depth-first pre-order traversal -
    // the same order as used by Mocha & Cypress.
    for (var i = s.suites.length - 1; i >= 0; i--) {
      suiteStack.push(s.suites[i]);
    }
  }
};
var iterateTests = exports.iterateTests = function* iterateTests(parent) {
  for (var suite of iterateSuites(parent)) {
    yield* suite.tests;
  }
};
var isAllureHook = hook => hook.title.includes(_model.ALLURE_REPORT_SYSTEM_HOOK);
exports.isAllureHook = isAllureHook;
var isRootAfterAllHook = hook => hook.parent.root && hook.hookName === "after all";
exports.isRootAfterAllHook = isRootAfterAllHook;
var includedInTestPlan = (testPlan, fullName, allureId) => testPlan.tests.some(test => {
  var _test$id;
  return allureId && ((_test$id = test.id) === null || _test$id === void 0 ? void 0 : _test$id.toString()) === allureId || test.selector === fullName;
});
var getIndicesOfDeselectedTests = (testPlan, spec, tests) => {
  var indicesToRemove = [];
  tests.forEach((test, index) => {
    var _labels$find;
    var {
      fullName,
      labels
    } = getNamesAndLabels(spec, test);
    var allureId = (_labels$find = labels.find(_ref => {
      var {
        name
      } = _ref;
      return name === _allureJsCommons.LabelName.ALLURE_ID;
    })) === null || _labels$find === void 0 ? void 0 : _labels$find.value;
    if (!includedInTestPlan(testPlan, fullName, allureId)) {
      indicesToRemove.push(index);
    }
  });
  return indicesToRemove;
};
var removeSortedIndices = (arr, indices) => {
  for (var i = indices.length - 1; i >= 0; i--) {
    arr.splice(indices[i], 1);
  }
};
//# sourceMappingURL=utils.js.map