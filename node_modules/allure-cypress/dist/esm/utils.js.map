{"version":3,"file":"utils.js","names":["LabelName","Status","extractMetadataFromString","getMessageAndTraceFromError","getStatusFromError","ALLURE_REPORT_STEP_COMMAND","ALLURE_REPORT_SYSTEM_HOOK","getAllureTestPlan","uint8ArrayToBase64","data","u8arrayLike","Array","isArray","buffer","btoa","String","fromCharCode","apply","getSuites","test","suites","s","parent","push","reverse","getSuitePath","filter","title","map","shouldCommandBeSkipped","command","_last","last","attributes","args","log","name","toReversed","arr","result","i","length","getNamesAndLabels","spec","rawName","cleanTitle","labels","titlePath","slice","fullName","concat","relative","join","getTestStartData","_test$wallClockStarte","_objectSpread","Cypress","start","wallClockStartedAt","getTime","Date","now","getTestStopData","_test$duration","_retries","duration","retries","getTestSkipData","statusDetails","message","applyTestPlan","root","testPlan","suite","iterateSuites","indicesToRemove","getIndicesOfDeselectedTests","tests","removeSortedIndices","resolveStatusWithDetails","error","status","PASSED","testReportedKey","Symbol","markTestAsReported","isTestReported","suiteStack","pop","iterateTests","isAllureHook","hook","includes","isRootAfterAllHook","hookName","includedInTestPlan","allureId","some","_test$id","id","toString","selector","forEach","index","_labels$find","find","_ref","ALLURE_ID","value","indices","splice"],"sources":["../../src/utils.ts"],"sourcesContent":["import { LabelName, Status } from \"allure-js-commons\";\nimport { extractMetadataFromString, getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport { ALLURE_REPORT_STEP_COMMAND, ALLURE_REPORT_SYSTEM_HOOK } from \"./model.js\";\nimport type { CypressCommand, CypressHook, CypressSuite, CypressTest } from \"./model.js\";\nimport { getAllureTestPlan } from \"./state.js\";\n\nexport const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data as number[]));\n};\n\nexport const getSuites = (test: CypressTest) => {\n  const suites: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = test.parent; s; s = s.parent) {\n    suites.push(s);\n  }\n  suites.reverse();\n  return suites;\n};\n\nexport const getSuitePath = (test: CypressTest): string[] =>\n  getSuites(test)\n    .filter((s) => s.title)\n    .map((s) => s.title);\n\nexport const shouldCommandBeSkipped = (command: CypressCommand) => {\n  if (last(command.attributes.args)?.log === false) {\n    return true;\n  }\n\n  if (command.attributes.name === \"task\" && command.attributes.args[0] === \"reportAllureRuntimeMessages\") {\n    return true;\n  }\n\n  // we don't need to report then commands because it's just a promise handle\n  if (command.attributes.name === \"then\") {\n    return true;\n  }\n\n  // we should skip artificial wrap from allure steps\n  if (command.attributes.name === \"wrap\" && command.attributes.args[0] === ALLURE_REPORT_STEP_COMMAND) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const toReversed = <T = unknown>(arr: T[]): T[] => {\n  const result: T[] = [];\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    result.push(arr[i]);\n  }\n\n  return result;\n};\n\nexport const last = <T = unknown>(arr: T[]): T | undefined => {\n  return arr[arr.length - 1];\n};\n\nexport const getNamesAndLabels = (spec: Cypress.Spec, test: CypressTest) => {\n  const rawName = test.title;\n  const { cleanTitle: name, labels } = extractMetadataFromString(rawName);\n  const suites = test.titlePath().slice(0, -1);\n  const fullName = `${spec.relative}#${[...suites, name].join(\" \")}`;\n  return { name, labels, fullName };\n};\n\nexport const getTestStartData = (test: CypressTest) => ({\n  ...getNamesAndLabels(Cypress.spec, test),\n  start: test.wallClockStartedAt?.getTime() || Date.now(),\n});\n\nexport const getTestStopData = (test: CypressTest) => ({\n  duration: test.duration ?? 0,\n  retries: (test as any)._retries ?? 0,\n});\n\nexport const getTestSkipData = () => ({\n  statusDetails: { message: \"This is a pending test\" },\n});\n\nexport const applyTestPlan = (spec: Cypress.Spec, root: CypressSuite) => {\n  const testPlan = getAllureTestPlan();\n  if (testPlan) {\n    for (const suite of iterateSuites(root)) {\n      const indicesToRemove = getIndicesOfDeselectedTests(testPlan, spec, suite.tests);\n      removeSortedIndices(suite.tests, indicesToRemove);\n    }\n  }\n};\n\nexport const resolveStatusWithDetails = (error: Error | undefined) =>\n  error\n    ? {\n        status: getStatusFromError(error),\n        statusDetails: getMessageAndTraceFromError(error),\n      }\n    : { status: Status.PASSED };\n\nconst testReportedKey = Symbol(\"The test was reported to Allure\");\n\nexport const markTestAsReported = (test: CypressTest) => {\n  (test as any)[testReportedKey] = true;\n};\n\nexport const isTestReported = (test: CypressTest) => (test as any)[testReportedKey] === true;\n\nexport const iterateSuites = function* (parent: CypressSuite) {\n  const suiteStack: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = parent; s; s = suiteStack.pop()) {\n    yield s;\n\n    // Pushing in reverse allows us to maintain depth-first pre-order traversal -\n    // the same order as used by Mocha & Cypress.\n    for (let i = s.suites.length - 1; i >= 0; i--) {\n      suiteStack.push(s.suites[i]);\n    }\n  }\n};\n\nexport const iterateTests = function* (parent: CypressSuite) {\n  for (const suite of iterateSuites(parent)) {\n    yield* suite.tests;\n  }\n};\n\nexport const isAllureHook = (hook: CypressHook) => hook.title.includes(ALLURE_REPORT_SYSTEM_HOOK);\n\nexport const isRootAfterAllHook = (hook: CypressHook) => hook.parent!.root && hook.hookName === \"after all\";\n\nconst includedInTestPlan = (testPlan: TestPlanV1, fullName: string, allureId: string | undefined): boolean =>\n  testPlan.tests.some((test) => (allureId && test.id?.toString() === allureId) || test.selector === fullName);\n\nconst getIndicesOfDeselectedTests = (testPlan: TestPlanV1, spec: Cypress.Spec, tests: readonly CypressTest[]) => {\n  const indicesToRemove: number[] = [];\n  tests.forEach((test, index) => {\n    const { fullName, labels } = getNamesAndLabels(spec, test);\n    const allureId = labels.find(({ name }) => name === LabelName.ALLURE_ID)?.value;\n\n    if (!includedInTestPlan(testPlan, fullName, allureId)) {\n      indicesToRemove.push(index);\n    }\n  });\n  return indicesToRemove;\n};\n\nconst removeSortedIndices = <T>(arr: T[], indices: readonly number[]) => {\n  for (let i = indices.length - 1; i >= 0; i--) {\n    arr.splice(indices[i], 1);\n  }\n};\n"],"mappings":"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","ignoreList":[]}