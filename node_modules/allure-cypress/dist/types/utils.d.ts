import { Status } from "allure-js-commons";
import type { CypressCommand, CypressHook, CypressSuite, CypressTest } from "./model.js";
export declare const uint8ArrayToBase64: (data: unknown) => string;
export declare const getSuites: (test: CypressTest) => CypressSuite[];
export declare const getSuitePath: (test: CypressTest) => string[];
export declare const shouldCommandBeSkipped: (command: CypressCommand) => boolean;
export declare const toReversed: <T = unknown>(arr: T[]) => T[];
export declare const last: <T = unknown>(arr: T[]) => T | undefined;
export declare const getNamesAndLabels: (spec: Cypress.Spec, test: CypressTest) => {
    name: string;
    labels: import("allure-js-commons").Label[];
    fullName: string;
};
export declare const getTestStartData: (test: CypressTest) => {
    start: number;
    name: string;
    labels: import("allure-js-commons").Label[];
    fullName: string;
};
export declare const getTestStopData: (test: CypressTest) => {
    duration: number;
    retries: any;
};
export declare const getTestSkipData: () => {
    statusDetails: {
        message: string;
    };
};
export declare const applyTestPlan: (spec: Cypress.Spec, root: CypressSuite) => void;
export declare const resolveStatusWithDetails: (error: Error | undefined) => {
    status: Status;
    statusDetails: Pick<import("allure-js-commons").StatusDetails, "message" | "trace">;
} | {
    status: Status;
    statusDetails?: undefined;
};
export declare const markTestAsReported: (test: CypressTest) => void;
export declare const isTestReported: (test: CypressTest) => boolean;
export declare const iterateSuites: (parent: CypressSuite) => Generator<CypressSuite, void, unknown>;
export declare const iterateTests: (parent: CypressSuite) => Generator<Mocha.Test & {
    wallClockStartedAt?: Date | undefined;
    parent: CypressSuite | undefined;
}, void, undefined>;
export declare const isAllureHook: (hook: CypressHook) => boolean;
export declare const isRootAfterAllHook: (hook: CypressHook) => boolean;
